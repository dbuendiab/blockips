## TODO: Añadir consultas con el filtro blocked (como en el notebook)
--- 
- 
  clave: "1"
  nombre: "Accesos por día"
  sql: |
      SELECT DATE(dateandtime) AS fecha, COUNT(*) AS num_accesos
      FROM access
      GROUP BY DATE(dateandtime)
- 
  clave: "2"
  nombre: "sqlite_master (tablas y campos)"
  sql: "SELECT * FROM sqlite_master\n"
- 
  clave: "3"
  nombre: "Detalle accesos día más concurrido"
  sql: |
      SELECT a.ipaddress, COUNT(*) AS accesos,
      strftime('%H:%M:%S', MIN(dateandtime)) AS inicial,
      strftime('%H:%M:%S', MAX(dateandtime)) AS final,
      (strftime('%s', MAX(dateandtime)) - strftime('%s', MIN(dateandtime))) AS segundos,
      SUM(CASE WHEN statuscode LIKE '4%' THEN 1 ELSE 0 END) as c4xx,
      CASE WHEN b.ipaddress THEN 'blocked' ELSE '' END as blocked
      FROM access AS a
      LEFT JOIN blocked AS b
      ON a.ipaddress = b.ipaddress
      WHERE DATE(dateandtime) = (
          SELECT DATE(dateandtime) AS fecha
          FROM access
          GROUP BY DATE(dateandtime)
          ORDER BY COUNT(*) DESC
          LIMIT 1)
      GROUP BY a.ipaddress
      HAVING accesos > 1
      ORDER BY accesos DESC
      LIMIT 100
-
  clave: "4"
  nombre: "IPs más persistentes (no bloqueadas)"
  sql: |
      SELECT ipaddress, 
          COUNT(*) AS veces, 
          COUNT(DISTINCT DATE(dateandtime)) AS dias,
          MAX(dateandtime) AS last,
          MIN(dateandtime) AS first
      FROM access
      WHERE ipaddress NOT IN (SELECT ipaddress FROM blocked)
      GROUP BY ipaddress
      HAVING COUNT(*) > 2
      ORDER BY 2 DESC
-
  clave: "5"
  nombre: "Historial de una IP"
  params: ["ipaddress"]
  sql: |
      SELECT dateandtime AS dt, method, substr(url, 1, 65), statuscode, bytessent
      FROM access
      WHERE ipaddress = :ipaddress
      ORDER BY dt 
      LIMIT 1000
-
  clave: "6"
  nombre: "URLs que el servidor aceptó (statuscode<>4xx)"
  sql: |
      SELECT method, SUBSTR(url,1,95) AS url, COUNT(*) AS n, statuscode AS sc
      FROM access
      WHERE sc NOT IN (404, 403, 400, 405, 499)
      AND ipaddress NOT IN (SELECT ipaddress FROM blocked)
      GROUP BY method, url, statuscode
      ORDER BY sc, method, url
-
  clave: "7"
  nombre: "Entradas con useragent LIKE algo"
  params: ["useragent_fragment"]
  sql: |
      SELECT ipaddress, dateandtime, method, SUBSTR(url, 1, 40) AS url, statuscode, SUBSTR(useragent, 1, 85) AS Agente 
      FROM access 
      WHERE useragent LIKE '%' || :useragent_fragment || '%'
      ORDER BY Agente
- 
  clave: "8"
  nombre: "Entradas de un día dado"
  params: ["dateandtime"]
  sql: |
      SELECT a.ipaddress, CASE WHEN b.ipaddress IS NOT NULL THEN 'X' ELSE '' END AS X,
             a.dateandtime, a.method, SUBSTR(a.url, 1, 40) AS url, a.statuscode -- , SUBSTR(a.useragent, 1, 60) AS Agente 
      FROM access AS a
      LEFT JOIN blocked AS b
      ON a.ipaddress = b.ipaddress
      WHERE DATE(a.dateandtime) = :dateandtime
      ORDER BY a.dateandtime ASC
      LIMIT 100
